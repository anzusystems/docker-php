map $status $static_cache_control_header {
    404     "no-cache, no-store, must-revalidate";
    default "${NGINX_STATIC_CACHE_CONTROL_HEADER}";
}

server {
    listen ${NGINX_PORT} default_server;
    root ${PROJECT_WEBROOT};

    sendfile off;
    client_body_buffer_size ${NGINX_CLIENT_BODY_BUFFER_SIZE};
    client_max_body_size    ${NGINX_CLIENT_MAX_BODY_SIZE};
    large_client_header_buffers 4 ${NGINX_LARGE_CLIENT_HEADER_BUFFERS_SIZE};

    set $cors '';
    if ($http_origin ~ '${NGINX_ALLOWED_ORIGINS_REGEX}') {
        set $cors 'true';
    }

    set $cors_static '';
    if ($http_origin ~ '${NGINX_STATIC_ALLOWED_ORIGINS_REGEX}') {
        set $cors_static 'true';
    }

    # Strip index.php from URL
    if ($request_uri ~* "^/index\.php(/?.*)") {
        return 301 $real_scheme://$host$1;
    }

    # App paths
    location / {
        try_files $uri /index.php$is_args$args;
    }

    location ~ ${NGINX_PHP_LOCATION_REGEX} {
        fastcgi_pass unix:/var/run/php/php-fpm.sock;

        include fastcgi_params;
        # Set buffer size for fastcgi upstream
        fastcgi_buffers 8 ${NGINX_PHP_FASTCGI_BUFFER_SIZE};
        fastcgi_buffer_size ${NGINX_PHP_FASTCGI_BUFFER_SIZE};

        fastcgi_split_path_info ${NGINX_PHP_FASTCGI_SPLIT_PATH_INFO};
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
        fastcgi_param SERVER_NAME $host;
        fastcgi_connect_timeout ${NGINX_PHP_FASTCGI_CONNECT_TIMEOUT};
        fastcgi_read_timeout ${NGINX_PHP_FASTCGI_READ_TIMEOUT};
        fastcgi_send_timeout ${NGINX_PHP_FASTCGI_SEND_TIMEOUT};

        # Mitigate https://httpoxy.org/ vulnerabilities
        fastcgi_param HTTP_PROXY "";

        # Custom nginx response headers
        fastcgi_hide_header X-Robots-Tag;
        add_header 'X-Robots-Tag' '${NGINX_PHP_X_ROBOTS_TAG}' always;
        add_header 'Strict-Transport-Security' '${NGINX_PHP_STRICT_TRANSPORT_SECURITY}' always;
        add_header 'X-XSS-Protection' '${NGINX_X_XSS_PROTECTION}' always;
        add_header 'X-Content-Type-Options' '${NGINX_X_CONTENT_TYPE_OPTIONS}' always;

        if ($request_method = 'OPTIONS') {
            set $cors "${cors}options";
        }

        if ($cors = 'true') {
            # non-OPTIONS method (PUT, POST, etc.) - allowed Origin host cors response headers
            add_header 'Access-Control-Allow-Origin' '$http_origin' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' '${NGINX_ACCESS_CONTROL_ALLOW_HEADERS}' always;

            # Add Vary header when dealing with multiple origins
            add_header 'Vary' 'Origin,Accept-Encoding' always;

            # Custom nginx response headers - needs to be repeated, because if is evil
            add_header 'X-Robots-Tag' '${NGINX_PHP_X_ROBOTS_TAG}' always;
            add_header 'Strict-Transport-Security' '${NGINX_PHP_STRICT_TRANSPORT_SECURITY}' always;
            add_header 'X-XSS-Protection' '${NGINX_X_XSS_PROTECTION}' always;
            add_header 'X-Content-Type-Options' '${NGINX_X_CONTENT_TYPE_OPTIONS}' always;
        }
        if ($cors = 'trueoptions') {
            # OPTIONS method - allowed Origin host cors response headers
            add_header 'Access-Control-Allow-Origin' '$http_origin' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' '${NGINX_ACCESS_CONTROL_ALLOW_HEADERS}' always;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;

            # Tell client that this pre-flight info is valid specified amount of time
            add_header 'Access-Control-Max-Age' ${NGINX_PHP_ACCESS_CONTROL_MAX_AGE};

            # Disable Cache
            add_header 'Cache-Control' 'no-store, no-cache, must-revalidate';

            # Add Vary header when dealing with multiple origins
            add_header 'Vary' 'Origin,Accept-Encoding' always;

            # Custom nginx response headers - needs to be repeated, because if is evil
            add_header 'X-Robots-Tag' '${NGINX_PHP_X_ROBOTS_TAG}' always;
            add_header 'Strict-Transport-Security' '${NGINX_PHP_STRICT_TRANSPORT_SECURITY}' always;
            add_header 'X-XSS-Protection' '${NGINX_X_XSS_PROTECTION}' always;
            add_header 'X-Content-Type-Options' '${NGINX_X_CONTENT_TYPE_OPTIONS}' always;
            return 204;
        }
        if ($cors = 'options') {
            # OPTIONS method - not allowed Origin host block
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            return 403 'Origin host not allowed!';
        }
    }

    location ~ ${NGINX_PHP_404_LOCATION_REGEX} {
        return 404;
    }

    location ~* ${NGINX_STATIC_LOCATION_REGEX} {
        # Custom nginx response headers
        add_header 'Host' '$host';
        add_header 'Cache-Control' '$static_cache_control_header' always;
        add_header 'X-Robots-Tag' '${NGINX_STATIC_X_ROBOTS_TAG}' always;
        add_header 'X-XSS-Protection' '${NGINX_X_XSS_PROTECTION}' always;
        add_header 'X-Content-Type-Options' '${NGINX_X_CONTENT_TYPE_OPTIONS}' always;

        if ($cors_static = 'true') {
            add_header 'Access-Control-Allow-Origin' '*' always;
            # Custom nginx response headers - needs to be repeated, because if is evil
            add_header 'Host' '$host';
            add_header 'Cache-Control' '$static_cache_control_header' always;
            add_header 'X-Robots-Tag' '${NGINX_STATIC_X_ROBOTS_TAG}' always;
            add_header 'X-XSS-Protection' '${NGINX_X_XSS_PROTECTION}' always;
            add_header 'X-Content-Type-Options' '${NGINX_X_CONTENT_TYPE_OPTIONS}' always;
        }
    }

    location ~ /\.ht {
        deny all;
    }
}
